//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Machine = newMachineTable("vending_machine_service", "machine", "")

type machineTable struct {
	postgres.Table

	// Columns
	UUID           postgres.ColumnString
	Name           postgres.ColumnString
	Location       postgres.ColumnString
	Status         postgres.ColumnString
	StorageDetails postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MachineTable struct {
	machineTable

	EXCLUDED machineTable
}

// AS creates new MachineTable with assigned alias
func (a MachineTable) AS(alias string) *MachineTable {
	return newMachineTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MachineTable with assigned schema name
func (a MachineTable) FromSchema(schemaName string) *MachineTable {
	return newMachineTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MachineTable with assigned table prefix
func (a MachineTable) WithPrefix(prefix string) *MachineTable {
	return newMachineTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MachineTable with assigned table suffix
func (a MachineTable) WithSuffix(suffix string) *MachineTable {
	return newMachineTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMachineTable(schemaName, tableName, alias string) *MachineTable {
	return &MachineTable{
		machineTable: newMachineTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newMachineTableImpl("", "excluded", ""),
	}
}

func newMachineTableImpl(schemaName, tableName, alias string) machineTable {
	var (
		UUIDColumn           = postgres.StringColumn("uuid")
		NameColumn           = postgres.StringColumn("name")
		LocationColumn       = postgres.StringColumn("location")
		StatusColumn         = postgres.StringColumn("status")
		StorageDetailsColumn = postgres.StringColumn("storage_details")
		allColumns           = postgres.ColumnList{UUIDColumn, NameColumn, LocationColumn, StatusColumn, StorageDetailsColumn}
		mutableColumns       = postgres.ColumnList{NameColumn, LocationColumn, StatusColumn, StorageDetailsColumn}
	)

	return machineTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UUID:           UUIDColumn,
		Name:           NameColumn,
		Location:       LocationColumn,
		Status:         StatusColumn,
		StorageDetails: StorageDetailsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
