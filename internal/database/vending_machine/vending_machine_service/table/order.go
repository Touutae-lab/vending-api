//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Order = newOrderTable("vending_machine_service", "order", "")

type orderTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	MachineID  postgres.ColumnString
	ProductID  postgres.ColumnInteger
	Quantity   postgres.ColumnInteger
	TotalPrice postgres.ColumnFloat
	OrderDate  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrderTable struct {
	orderTable

	EXCLUDED orderTable
}

// AS creates new OrderTable with assigned alias
func (a OrderTable) AS(alias string) *OrderTable {
	return newOrderTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrderTable with assigned schema name
func (a OrderTable) FromSchema(schemaName string) *OrderTable {
	return newOrderTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrderTable with assigned table prefix
func (a OrderTable) WithPrefix(prefix string) *OrderTable {
	return newOrderTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrderTable with assigned table suffix
func (a OrderTable) WithSuffix(suffix string) *OrderTable {
	return newOrderTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrderTable(schemaName, tableName, alias string) *OrderTable {
	return &OrderTable{
		orderTable: newOrderTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newOrderTableImpl("", "excluded", ""),
	}
}

func newOrderTableImpl(schemaName, tableName, alias string) orderTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		MachineIDColumn  = postgres.StringColumn("machine_id")
		ProductIDColumn  = postgres.IntegerColumn("product_id")
		QuantityColumn   = postgres.IntegerColumn("quantity")
		TotalPriceColumn = postgres.FloatColumn("total_price")
		OrderDateColumn  = postgres.TimestampColumn("order_date")
		allColumns       = postgres.ColumnList{IDColumn, MachineIDColumn, ProductIDColumn, QuantityColumn, TotalPriceColumn, OrderDateColumn}
		mutableColumns   = postgres.ColumnList{MachineIDColumn, ProductIDColumn, QuantityColumn, TotalPriceColumn, OrderDateColumn}
	)

	return orderTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		MachineID:  MachineIDColumn,
		ProductID:  ProductIDColumn,
		Quantity:   QuantityColumn,
		TotalPrice: TotalPriceColumn,
		OrderDate:  OrderDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
